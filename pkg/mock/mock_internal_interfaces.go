// Code generated by MockGen. DO NOT EDIT.
// Source: command_types.go

// Package mock is a generated GoMock package.
package mock

import (
	bufio "bufio"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCommandRead is a mock of CommandRead interface.
type MockCommandRead struct {
	ctrl     *gomock.Controller
	recorder *MockCommandReadMockRecorder
}

// MockCommandReadMockRecorder is the mock recorder for MockCommandRead.
type MockCommandReadMockRecorder struct {
	mock *MockCommandRead
}

// NewMockCommandRead creates a new mock instance.
func NewMockCommandRead(ctrl *gomock.Controller) *MockCommandRead {
	mock := &MockCommandRead{ctrl: ctrl}
	mock.recorder = &MockCommandReadMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommandRead) EXPECT() *MockCommandReadMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockCommandRead) Read(reader *bufio.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", reader)
	ret0, _ := ret[0].(error)
	return ret0
}

// Read indicates an expected call of Read.
func (mr *MockCommandReadMockRecorder) Read(reader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockCommandRead)(nil).Read), reader)
}

// MockSyncCommandRead is a mock of SyncCommandRead interface.
type MockSyncCommandRead struct {
	ctrl     *gomock.Controller
	recorder *MockSyncCommandReadMockRecorder
}

// MockSyncCommandReadMockRecorder is the mock recorder for MockSyncCommandRead.
type MockSyncCommandReadMockRecorder struct {
	mock *MockSyncCommandRead
}

// NewMockSyncCommandRead creates a new mock instance.
func NewMockSyncCommandRead(ctrl *gomock.Controller) *MockSyncCommandRead {
	mock := &MockSyncCommandRead{ctrl: ctrl}
	mock.recorder = &MockSyncCommandReadMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyncCommandRead) EXPECT() *MockSyncCommandReadMockRecorder {
	return m.recorder
}

// CorrelationId mocks base method.
func (m *MockSyncCommandRead) CorrelationId() uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CorrelationId")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// CorrelationId indicates an expected call of CorrelationId.
func (mr *MockSyncCommandReadMockRecorder) CorrelationId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CorrelationId", reflect.TypeOf((*MockSyncCommandRead)(nil).CorrelationId))
}

// Read mocks base method.
func (m *MockSyncCommandRead) Read(reader *bufio.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", reader)
	ret0, _ := ret[0].(error)
	return ret0
}

// Read indicates an expected call of Read.
func (mr *MockSyncCommandReadMockRecorder) Read(reader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockSyncCommandRead)(nil).Read), reader)
}

// ResponseCode mocks base method.
func (m *MockSyncCommandRead) ResponseCode() uint16 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResponseCode")
	ret0, _ := ret[0].(uint16)
	return ret0
}

// ResponseCode indicates an expected call of ResponseCode.
func (mr *MockSyncCommandReadMockRecorder) ResponseCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResponseCode", reflect.TypeOf((*MockSyncCommandRead)(nil).ResponseCode))
}

// MockCommandWrite is a mock of CommandWrite interface.
type MockCommandWrite struct {
	ctrl     *gomock.Controller
	recorder *MockCommandWriteMockRecorder
}

// MockCommandWriteMockRecorder is the mock recorder for MockCommandWrite.
type MockCommandWriteMockRecorder struct {
	mock *MockCommandWrite
}

// NewMockCommandWrite creates a new mock instance.
func NewMockCommandWrite(ctrl *gomock.Controller) *MockCommandWrite {
	mock := &MockCommandWrite{ctrl: ctrl}
	mock.recorder = &MockCommandWriteMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommandWrite) EXPECT() *MockCommandWriteMockRecorder {
	return m.recorder
}

// Key mocks base method.
func (m *MockCommandWrite) Key() uint16 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Key")
	ret0, _ := ret[0].(uint16)
	return ret0
}

// Key indicates an expected call of Key.
func (mr *MockCommandWriteMockRecorder) Key() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Key", reflect.TypeOf((*MockCommandWrite)(nil).Key))
}

// SizeNeeded mocks base method.
func (m *MockCommandWrite) SizeNeeded() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SizeNeeded")
	ret0, _ := ret[0].(int)
	return ret0
}

// SizeNeeded indicates an expected call of SizeNeeded.
func (mr *MockCommandWriteMockRecorder) SizeNeeded() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SizeNeeded", reflect.TypeOf((*MockCommandWrite)(nil).SizeNeeded))
}

// Version mocks base method.
func (m *MockCommandWrite) Version() int16 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(int16)
	return ret0
}

// Version indicates an expected call of Version.
func (mr *MockCommandWriteMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockCommandWrite)(nil).Version))
}

// Write mocks base method.
func (m *MockCommandWrite) Write(writer *bufio.Writer) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", writer)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockCommandWriteMockRecorder) Write(writer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockCommandWrite)(nil).Write), writer)
}

// MockSyncCommandWrite is a mock of SyncCommandWrite interface.
type MockSyncCommandWrite struct {
	ctrl     *gomock.Controller
	recorder *MockSyncCommandWriteMockRecorder
}

// MockSyncCommandWriteMockRecorder is the mock recorder for MockSyncCommandWrite.
type MockSyncCommandWriteMockRecorder struct {
	mock *MockSyncCommandWrite
}

// NewMockSyncCommandWrite creates a new mock instance.
func NewMockSyncCommandWrite(ctrl *gomock.Controller) *MockSyncCommandWrite {
	mock := &MockSyncCommandWrite{ctrl: ctrl}
	mock.recorder = &MockSyncCommandWriteMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyncCommandWrite) EXPECT() *MockSyncCommandWriteMockRecorder {
	return m.recorder
}

// CorrelationId mocks base method.
func (m *MockSyncCommandWrite) CorrelationId() uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CorrelationId")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// CorrelationId indicates an expected call of CorrelationId.
func (mr *MockSyncCommandWriteMockRecorder) CorrelationId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CorrelationId", reflect.TypeOf((*MockSyncCommandWrite)(nil).CorrelationId))
}

// Key mocks base method.
func (m *MockSyncCommandWrite) Key() uint16 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Key")
	ret0, _ := ret[0].(uint16)
	return ret0
}

// Key indicates an expected call of Key.
func (mr *MockSyncCommandWriteMockRecorder) Key() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Key", reflect.TypeOf((*MockSyncCommandWrite)(nil).Key))
}

// SetCorrelationId mocks base method.
func (m *MockSyncCommandWrite) SetCorrelationId(id uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCorrelationId", id)
}

// SetCorrelationId indicates an expected call of SetCorrelationId.
func (mr *MockSyncCommandWriteMockRecorder) SetCorrelationId(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCorrelationId", reflect.TypeOf((*MockSyncCommandWrite)(nil).SetCorrelationId), id)
}

// SizeNeeded mocks base method.
func (m *MockSyncCommandWrite) SizeNeeded() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SizeNeeded")
	ret0, _ := ret[0].(int)
	return ret0
}

// SizeNeeded indicates an expected call of SizeNeeded.
func (mr *MockSyncCommandWriteMockRecorder) SizeNeeded() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SizeNeeded", reflect.TypeOf((*MockSyncCommandWrite)(nil).SizeNeeded))
}

// Version mocks base method.
func (m *MockSyncCommandWrite) Version() int16 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(int16)
	return ret0
}

// Version indicates an expected call of Version.
func (mr *MockSyncCommandWriteMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockSyncCommandWrite)(nil).Version))
}

// Write mocks base method.
func (m *MockSyncCommandWrite) Write(writer *bufio.Writer) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", writer)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockSyncCommandWriteMockRecorder) Write(writer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockSyncCommandWrite)(nil).Write), writer)
}

// MockcommandInformer is a mock of commandInformer interface.
type MockcommandInformer struct {
	ctrl     *gomock.Controller
	recorder *MockcommandInformerMockRecorder
}

// MockcommandInformerMockRecorder is the mock recorder for MockcommandInformer.
type MockcommandInformerMockRecorder struct {
	mock *MockcommandInformer
}

// NewMockcommandInformer creates a new mock instance.
func NewMockcommandInformer(ctrl *gomock.Controller) *MockcommandInformer {
	mock := &MockcommandInformer{ctrl: ctrl}
	mock.recorder = &MockcommandInformerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcommandInformer) EXPECT() *MockcommandInformerMockRecorder {
	return m.recorder
}

// Key mocks base method.
func (m *MockcommandInformer) Key() uint16 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Key")
	ret0, _ := ret[0].(uint16)
	return ret0
}

// Key indicates an expected call of Key.
func (mr *MockcommandInformerMockRecorder) Key() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Key", reflect.TypeOf((*MockcommandInformer)(nil).Key))
}

// MaxVersion mocks base method.
func (m *MockcommandInformer) MaxVersion() int16 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaxVersion")
	ret0, _ := ret[0].(int16)
	return ret0
}

// MaxVersion indicates an expected call of MaxVersion.
func (mr *MockcommandInformerMockRecorder) MaxVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxVersion", reflect.TypeOf((*MockcommandInformer)(nil).MaxVersion))
}

// MinVersion mocks base method.
func (m *MockcommandInformer) MinVersion() int16 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MinVersion")
	ret0, _ := ret[0].(int16)
	return ret0
}

// MinVersion indicates an expected call of MinVersion.
func (mr *MockcommandInformerMockRecorder) MinVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MinVersion", reflect.TypeOf((*MockcommandInformer)(nil).MinVersion))
}
