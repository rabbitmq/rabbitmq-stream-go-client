// Code generated by MockGen. DO NOT EDIT.
// Source: types.go

// Package stream is a generated GoMock package.
package stream

import (
	context "context"
	reflect "reflect"

	amqp "github.com/rabbitmq/rabbitmq-stream-go-client/v2/pkg/codecs/amqp"
	gomock "go.uber.org/mock/gomock"
)

// MockProducer is a mock of Producer interface.
type MockProducer struct {
	ctrl     *gomock.Controller
	recorder *MockProducerMockRecorder
}

// MockProducerMockRecorder is the mock recorder for MockProducer.
type MockProducerMockRecorder struct {
	mock *MockProducer
}

// NewMockProducer creates a new mock instance.
func NewMockProducer(ctrl *gomock.Controller) *MockProducer {
	mock := &MockProducer{ctrl: ctrl}
	mock.recorder = &MockProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProducer) EXPECT() *MockProducerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockProducer) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockProducerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockProducer)(nil).Close))
}

// Send mocks base method.
func (m *MockProducer) Send(ctx context.Context, msg amqp.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockProducerMockRecorder) Send(ctx, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockProducer)(nil).Send), ctx, msg)
}

// SendBatch mocks base method.
func (m *MockProducer) SendBatch(ctx context.Context, messages []amqp.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendBatch", ctx, messages)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendBatch indicates an expected call of SendBatch.
func (mr *MockProducerMockRecorder) SendBatch(ctx, messages interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendBatch", reflect.TypeOf((*MockProducer)(nil).SendBatch), ctx, messages)
}

// SendWithId mocks base method.
func (m *MockProducer) SendWithId(ctx context.Context, publishingId uint64, msg amqp.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendWithId", ctx, publishingId, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendWithId indicates an expected call of SendWithId.
func (mr *MockProducerMockRecorder) SendWithId(ctx, publishingId, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendWithId", reflect.TypeOf((*MockProducer)(nil).SendWithId), ctx, publishingId, msg)
}

// MockinternalProducer is a mock of internalProducer interface.
type MockinternalProducer struct {
	ctrl     *gomock.Controller
	recorder *MockinternalProducerMockRecorder
}

// MockinternalProducerMockRecorder is the mock recorder for MockinternalProducer.
type MockinternalProducerMockRecorder struct {
	mock *MockinternalProducer
}

// NewMockinternalProducer creates a new mock instance.
func NewMockinternalProducer(ctrl *gomock.Controller) *MockinternalProducer {
	mock := &MockinternalProducer{ctrl: ctrl}
	mock.recorder = &MockinternalProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockinternalProducer) EXPECT() *MockinternalProducerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockinternalProducer) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockinternalProducerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockinternalProducer)(nil).Close))
}

// Send mocks base method.
func (m *MockinternalProducer) Send(ctx context.Context, msg amqp.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockinternalProducerMockRecorder) Send(ctx, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockinternalProducer)(nil).Send), ctx, msg)
}

// SendBatch mocks base method.
func (m *MockinternalProducer) SendBatch(ctx context.Context, messages []amqp.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendBatch", ctx, messages)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendBatch indicates an expected call of SendBatch.
func (mr *MockinternalProducerMockRecorder) SendBatch(ctx, messages interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendBatch", reflect.TypeOf((*MockinternalProducer)(nil).SendBatch), ctx, messages)
}

// SendWithId mocks base method.
func (m *MockinternalProducer) SendWithId(ctx context.Context, publishingId uint64, msg amqp.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendWithId", ctx, publishingId, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendWithId indicates an expected call of SendWithId.
func (mr *MockinternalProducerMockRecorder) SendWithId(ctx, publishingId, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendWithId", reflect.TypeOf((*MockinternalProducer)(nil).SendWithId), ctx, publishingId, msg)
}

// shutdown mocks base method.
func (m *MockinternalProducer) shutdown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "shutdown")
}

// shutdown indicates an expected call of shutdown.
func (mr *MockinternalProducerMockRecorder) shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "shutdown", reflect.TypeOf((*MockinternalProducer)(nil).shutdown))
}
